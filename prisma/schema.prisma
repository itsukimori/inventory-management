generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Staff {
  id        String    @id @default(uuid())
  companyId String?   @map("company_id")
  name      String
  email     String    @unique
  password  String?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  company  Company?   @relation(fields: [companyId], references: [id])
  product  Product[]
  order    Order[]

  @@map("staff")
}

model Product {
  staffEmail  String?    @map("staff_email")
  category    String
  name        String @id 
  price       Int
  stock       Int
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  orderDetails OrderDetails[]
  staff        Staff?        @relation(fields: [staffEmail], references: [email])

  @@map("product")
}

model Company {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  staff        Staff[]
  joiningStore JoiningStore[]

  @@map("company")
}

model JoiningStore {
  id        String    @id @default(uuid())
  companyId String
  name      String
  address   String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  company      Company        @relation(fields: [companyId], references: [id])
  orderHistory OrderHistory[]

  @@map("joining_store")
}

model Order {
  id             String    @id @default(uuid())
  staffId        String    @map("staff_id")
  joiningStoreId String    @map("joining_store_id")
  orderDetailsId String    @map("order_details_id")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime? @updatedAt @map("updated_at")
  deletedAt      DateTime? @map("deleted_at")

  staff        Staff          @relation(fields: [staffId], references: [id])
  orderDetails OrderDetails[]
  orderHistory OrderHistory[]

  @@map("order")
}

model OrderDetails {
  id              String    @id @default(uuid())
  orderId         String    @map("order_id")
  productName       String    @map("product_name")
  productQuantity Int
  productPrice    Int
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime? @updatedAt @map("updated_at")
  deletedAt       DateTime? @map("deleted_at")

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productName], references: [name])

  @@map("order_details")
}

model OrderHistory {
  id             String    @id @default(uuid())
  joiningStoreId String    @map("joining_store_id")
  orderId        String    @map("order_id")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime? @updatedAt @map("updated_at")
  deletedAt      DateTime? @map("deleted_at")

  joiningStore JoiningStore @relation(fields: [joiningStoreId], references: [id])
  order        Order        @relation(fields: [orderId], references: [id])

  @@map("order_history")
}
